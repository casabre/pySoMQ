[tox]
minversion = 3.18
envlist = codestyle,docstyle,errors,types,test,coverage
isolated_build = True

[testenv]
extras = test
commands =
    test-py3{5,6,7,8}: pytest {posargs:tests}

[testenv:format]
description = Autoformat code.
skip_install = true
envdir = {toxworkdir}/lint
deps =
    black
    isort >= 5.0
commands =
    isort .
    black src/ tests/

[testenv:lint]
description = Check code for stylistic and logical errors.
envdir = {toxworkdir}/lint
deps =
    {[testenv:codestyle]deps}
    {[testenv:docstyle]deps}
    {[testenv:types]deps}
    {[testenv:errors]deps}
commands =
    {[testenv:codestyle]commands}
    {[testenv:docstyle]commands}
    {[testenv:types]commands}
    {[testenv:errors]commands}

[testenv:codestyle]
description = Check code and tests for PEP 8 compliance and code complexity.
skip_install = true
envdir = {toxworkdir}/lint
deps =
    flake8
    isort >= 5.0
commands =
    flake8 --select E,W,C --show-source src/ tests/
    isort --check --diff .

[testenv:docstyle]
description = Check docstrings for PEP 257 compliance (Google style).
skip_install = true
envdir = {toxworkdir}/lint
deps =
    pydocstyle
commands = pydocstyle src/

[testenv:errors]
description = Find errors with static code analysis.
envdir = {toxworkdir}/lint
deps =
    flake8
    flake8-gl-codeclimate
    pylint
    pylint-gitlab
commands =
    flake8 --exit-zero --format gl-codeclimate --output-file flake.json --select F src/pysomq tests/
    pylint --exit-zero --load-plugins=pylint_gitlab --output-format=gitlab-codeclimate:pylint.json,colorized --errors-only src/pysomq

[testenv:types]
description = Run static type checker.
skip_install = true
envdir = {toxworkdir}/lint
deps =
    mypy
commands =
    mypy --check-untyped-defs --no-implicit-optional src/

[testenv:test]
description = Run tests with pytest.
passenv = CI
extras = test
commands =
    pytest --cov --cov-report= {posargs:tests}

[testenv:coverage]
description = Measure and report coverage.
deps =
    coverage[toml]
commands =
    coverage html
    coverage xml
    coverage report --fail-under 50

[testenv:clean]
description = Remove all generated and temporary files.
skip_install = true
allowlist_externals =
    git
deps =
    coverage[toml]
commands =
    coverage erase
    git clean -xfd

[testenv:docs]
description = Generate API documentation.
changedir = docs
extras = docs
commands =
    sphinx-build -W -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:build]
description = Build package.
allowlist_externals =
    git
deps =
    build[virtualenv]
commands =
    git clean -xfd dist/
    python -m build

[testenv:upload]
description = Upload package.
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    REPOSITORY_URL
commands = 
    twine upload dist/*

[flake8]
ignore = W503,E203
max-line-length = 79

[pydocstyle]
convention = google
